<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Randomize
radius = random_range(80, 300);
base_rot = random(360);
rot_speed = choose(random_range(-0.02, -0.005), random_range(0.005, 0.02));
cam_xrot = 0;
cam_yrot = 0;

xtilt = random_range(-45, 45);
ztilt = random_range(-25, 25);

has_water = choose(true, false)
has_plants = choose(true, false) * has_water;

if (has_water)  {
    color_base = make_colour_hsv(irandom_range(170, 195), 255 * random_range(0.5, 1), 255 * random_range(0.3, 0.6));
    if (has_plants) {
        color_land = make_colour_hsv(255 * random_range(0.25, 0.33), 255 * random_range(0.5, 1), 255 * random_range(0.3, 0.6));
        color_decal = make_colour_hsv(255 * random_range(0.25, 0.33), 255 * random_range(0.5, 1), 255 * random_range(0.3, 0.6));
    }   else    {
        color_land = make_colour_hsv(irandom_range(15, 25), 255 * random(1), 255 * random_range(0.5, 0.9));
        color_decal = make_colour_hsv(irandom_range(15, 25), 255 * random(1), 255 * random_range(0.5, 0.9));
    }
}   else    {
    color_base = make_colour_hsv(irandom_range(15, 25), 255 * random(1), 255 * random_range(0.5, 0.9));
    color_land = merge_colour(color_base, c_white, 0.3 * random(1));
    color_decal = merge_colour(color_base, c_white, 0.3 * random(1));
}
color_atmo = make_colour_hsv(irandom(255), irandom_range(130, 255), irandom_range(130, 255));
alpha_atmo = (random(1) * random(1)) / 2
alpha_atmo += 0.3 * has_water;
alpha_atmo += 0.2 * has_plants;
alpha_atmo = min(alpha_atmo, 0.75);

shadow_tex = sprite_get_texture(tex_shadow, 0);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spin
if (!surface_exists(surf))  {
    event_user(0);
}

var rot_len = 50000 * meter_size;
base_rot = (base_rot + rot_speed * 360* dT) % 360;
cam_xrot = 360 * (view_xview[0] / rot_len);
//cam_yrot = 360 * (view_yview[0] / rot_len);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate texture
surf = surface_create(1000, 500);
var land_surf = surface_create(1000, 500);

surface_set_target(land_surf);
draw_clear_alpha(c_black, 0);

var lm, i = 1;
lm[0] = irandom(sprite_get_number(tex_landmasses) - 1);
while (irandom(1) == 1) {
    lm[i] = irandom(sprite_get_number(tex_landmasses) - 1);
    i += 1;
}

for (var n = 0; n &lt; i; n++) {
    draw_sprite(tex_landmasses, lm[n], 0, 0);
}
surface_reset_target();

surface_set_target(surf);
draw_clear(c_black);
draw_sprite_ext(tex_base, irandom(2), 0, 0, 1, 1, 0, color_base, 1);
draw_surface_ext(land_surf, 0, 0, 1, 1, 0, color_land, 1);
surface_reset_target();

/// Details
/*
surface_set_target(land_surf);
draw_clear_alpha(c_black, 0);

for (var n = 0; n &lt; i; n++) {
    draw_sprite_ext(tex_details, lm[n], 0, 0, 1, 1, 0, c_white, random_range(0.2, 1));
}
surface_reset_target();

surface_set_target(surf);
draw_surface_ext(land_surf, 0, 0, 1, 1, 0, color_decal, 1);
surface_reset_target();
*/


tex = surface_get_texture(surf);
surface_free(land_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
var xx = x * 0.01 + obj_ship_player.x * 0.99;
var yy = y * 0.01 + obj_ship_player.y * 0.99;


d3d_set_culling(true);
draw_set_color(c_white);
//d3d_transform_add_rotation_x(-90);
//d3d_transform_add_rotation_z(cam_yrot);

var main_rot = base_rot + cam_xrot;
//main_rot = 90;
d3d_transform_add_rotation_x(-cam_yrot);
d3d_transform_add_rotation_y(main_rot);
//d3d_transform_add_rotation_axis(lengthdir_y(1, main_rot), 0, lengthdir_x(1, main_rot), cam_yrot);
d3d_transform_add_translation(xx, yy, 0);
d3d_draw_ellipsoid(-radius, -radius, -radius, radius, radius, radius, tex, 1, 1, 32);
d3d_transform_set_identity();
d3d_set_culling(false);

draw_primitive_begin(pr_trianglestrip);
var p = 32, rmin = radius * 0.90, rmax = radius * 1.05;
draw_vertex_colour(xx + rmin, yy, color_atmo, 0);
for (var a = 0; a &lt; 360; a += 360 / p)  {
    var x1 = xx + lengthdir_x(rmax, a), y1 = yy + lengthdir_y(rmax, a);
    draw_vertex_colour(x1, y1, color_atmo, alpha_atmo);
    var x2 = xx + lengthdir_x(rmin, a + 360 / p), y2 = yy + lengthdir_y(rmin, a + 360 / p);
    draw_vertex_colour(x2, y2, color_atmo, 0);
}
draw_vertex_colour(xx + rmax, yy, color_atmo, alpha_atmo);
draw_primitive_end()

//  Shadow
var sr = radius * 1.1;
d3d_set_culling(true);
d3d_transform_add_rotation_x(90);
d3d_transform_add_rotation_y(cam_xrot);
//d3d_transform_add_rotation_z(90);
d3d_transform_add_translation(xx, yy, 0);
d3d_draw_ellipsoid(-sr, -sr, -sr, sr, sr, sr, shadow_tex, 1, 1, 32);
d3d_transform_set_identity();
d3d_set_culling(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf);
event_perform(ev_create, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
