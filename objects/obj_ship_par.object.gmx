<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the ship
equipped_ship = dat_create_ship(shp_striker);
equipped_engine = dat_create_engine(eng_hyper03);
equipped_power = dat_create_engine(pow_micrortg);
dat_update_local_ship(equipped_ship, true);

phys_speed = 0;
phys_dir = 0;

thrusting = false;
stopping = false;

thruster_flame_size = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
x += lengthdir_x(phys_speed * dT * meter_size, phys_dir);
y += lengthdir_y(phys_speed * dT * meter_size, phys_dir);

if (object_index == obj_ship_player)    {    
    view_xview[0] = x - view_wview[0] / 2;
    view_yview[0] = y - view_hview[0] / 2;
    background_xscale[0] = view_wview[0] / view_wport[0];
    background_yscale[0] = view_hview[0] / view_hport[0];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trails
var eng_count = dat_get_raw(equipped_ship, 'engine_points', 0);
for (var e = 0; e &lt; eng_count; e++)    {
    if (thrusting)    {
        var e_color = dat_get_raw(equipped_engine, 'color', c_black);
        if (my_trail_fx[e] == noone)   {
            my_trail_fx[e] = instance_create(0, 0, obj_fx_trail);
            my_trail_fx[e].color = e_color;
        }
        var len = dat_get_raw(equipped_ship, 'engine_point_len_' + string(e), 0);
        var dir = dat_get_raw(equipped_ship, 'engine_point_dir_' + string(e), 0);
        var xx = x + lengthdir_x(len, dir + image_angle);
        var yy = y + lengthdir_y(len, dir + image_angle);
        
        trail_add_point(my_trail_fx[e], xx, yy, image_angle);
        lighting_add_light(spr_fx_light, xx, yy, random_range(0.8, 1.2), 0, e_color, thruster_flame_size);
    }   else    {
        if (my_trail_fx[e] != noone)   {
            my_trail_fx[e].fade = true;
            my_trail_fx[e] = noone;
        }
    }
}

if (thrusting)    {
    thruster_flame_size = 1;
}   else    {
    thruster_flame_size = max(0, thruster_flame_size - random(1) * 5 * dT);
}

if (thrusting || stopping)  {
    my_fuel -= dat_get_raw(equipped_engine, 'engine_consumption', 100) * dT;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Ship
//  Shadow
lighting_draw_shadow(sprite_base, 0, x, y, image_xscale * 1.5, image_yscale * 1.5, image_angle, c_black, 0.5);
//  Mask
lighting_add_mask(sprite_base, 0, x, y, image_xscale, image_yscale, image_angle);
//  Ship
draw_sprite_ext(sprite_base, 0, x, y, image_xscale, image_yscale, image_angle, color_0, 1);
draw_sprite_ext(sprite_base, 1, x, y, image_xscale, image_yscale, image_angle, color_1, 1);
draw_sprite_ext(sprite_paint, paint_eqipped, x, y, image_xscale, image_yscale, image_angle, color_2, 1);
draw_sprite_ext(sprite_base, 2, x, y, image_xscale, image_yscale, image_angle, c_white, 1);

var eng_count = dat_get_raw(equipped_ship, 'engine_points', 0);
var e_color = dat_get_raw(equipped_engine, 'color', c_black);
draw_set_blend_mode(bm_add);
for (var e = 0; e &lt; eng_count; e++)    {
    var len = dat_get_raw(equipped_ship, 'engine_point_len_' + string(e), 0);
    var dir = dat_get_raw(equipped_ship, 'engine_point_dir_' + string(e), 0);
    var xx = x + lengthdir_x(len, dir + image_angle);
    var yy = y + lengthdir_y(len, dir + image_angle);
    
    var xscale = random_range(0.8, 1.2) * thruster_flame_size;
    var yscale = random_range(0.8, 1.2) * thruster_flame_size * choose(-1, 1);
    
    draw_sprite_ext(spr_fx_engine_flame, 0, xx, yy, xscale, yscale, image_angle, e_color, 1);
    draw_sprite_ext(spr_fx_engine_flame, 0, xx, yy, xscale * 0.5, yscale * 0.5, image_angle, c_white, 0.5);
}
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
