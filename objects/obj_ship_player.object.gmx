<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update starter ship
event_inherited();
/*ds_map_replace(vessel_get_ship(), 'fixed_mounts_current', 6);
var thing = true;
while (thing)   {
    var wep = dat_create_weapon(wep_maw1);
    thing = vessel_add_weapon(wep);
}/**/
/*var wep = dat_create_weapon(wep_thumper);
vessel_add_weapon(wep);*/
wep = dat_create_weapon(wep_maw1);
vessel_add_weapon(wep);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input
var up = keyboard_check(ord('W'));
var down = keyboard_check(ord('S'));
var left = keyboard_check(ord('A'));
var right = keyboard_check(ord('D'));
var tm = 1;
var dat_ship = dat_get_default(vessel, 'dat_ship', -1);
var dat_engine = dat_get_default(vessel, 'dat_engine', -1);

var loc_max_speed = max_speed;
for (var i = 0; i &lt; instance_number(obj_speedzone); i++)    {
    var zone = instance_find(obj_speedzone, i);
    if (point_distance(x, y, zone.x, zone.y) &lt;= zone.lim_radius * meter_size)   {
        loc_max_speed = min(loc_max_speed, zone.lim_speed);
    }
}

if (phys_speed &gt; loc_max_speed) {
    up = false;
    down = true;
    tm = 5;
} else if (phys_speed == loc_max_speed)    {
    up = false;
}

if (up || down) {
    //  Parallel
    var thrust = dat_get_raw(dat_engine, 'engine_thrust', 0) * dat_get_raw(dat_ship, 'thrust_mult', 1);
    var acc = tm * thrust / dat_get_total_mass(vessel);
    var post = phys_speed + acc * (up - down) * gT;
    if ((phys_speed != loc_max_speed) &amp;&amp; (median(phys_speed, post, loc_max_speed) == loc_max_speed))   {
        phys_speed = loc_max_speed;
    }   else    {
        phys_speed = clamp(post, 0, max_speed);
    }
}

if (left || right)  {
    //  Rotational
    var thrust = dat_get_raw(dat_engine, 'engine_rot', 0) * dat_get_raw(dat_ship, 'handling_mult', 1);
    var rot = 60 * thrust / dat_get_total_mass(vessel);
    phys_dir += rot * (left - right) * gT;
    phys_dir = (phys_dir + 360) % 360;
    image_angle = phys_dir;
}

//  Weapons
if ((mouse_check_button(mb_left)) &amp;&amp; (gT &gt; 0))  {
    firing = true;
}   else    {
    firing = false;
}

//  Update position
thrusting = (up &amp;&amp; !down);
stopping = ((down &amp;&amp; !up) &amp;&amp; (phys_speed &gt; 0));
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open Menus
if ((keyboard_check_pressed(ord('I'))) &amp;&amp; (!instance_exists(obj_menu_par)))   {
    instance_create(0, 0, obj_menu_customize_ship);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test
var p = instance_create(0, 0, obj_projectile_bullet);
p.phys_speed = 8000;
p.phys_dir = point_direction(0, 0, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI Bars
if (instance_exists(obj_menu_par))  exit;
//
draw_sprite(spr_hud_lower_left, 0, 0, window_get_height());
draw_set_color(c_red);
draw_text(8, 8, string(fps));

//  Health
var xx = 20, mh = 160, p = my_internal / max_internal;
draw_set_colour(c_lime);
draw_hudbar(xx, mh, p);
//  Hull
xx = 40; p = my_hull / max_hull;
draw_set_colour(c_blue);
draw_hudbar(xx, mh, p);
//  Energy
xx = 60; p = my_elec / max_elec;
draw_set_colour(c_yellow);
draw_hudbar(xx, mh, p);
//  Heat
xx = 80; p = my_heat / max_heat;
draw_set_colour(c_red);
draw_hudbar(xx, mh, p);
//  Fuel
xx = 100; p = my_fuel / max_fuel;
draw_set_colour(c_orange);
draw_hudbar(xx, mh, p);

//  Speed (0 - 25)
xx = 130; p = clamp(phys_speed / 25, 0, 1);
draw_set_color(c_red);
draw_hudbar(xx, mh, p);

//  Speed (25 - 50)
xx = 150; p = clamp((phys_speed - 25) / 25, 0, 1);
draw_hudbar(xx, mh, p);

//  Speed (50 - 125)
xx = 170; mh = 150; p = clamp((phys_speed - 50) / 75, 0, 1);
draw_set_color(c_yellow);
draw_hudbar(xx, mh, p);

//  Speed (125 - 200)
xx = 190; p = clamp((phys_speed - 125) / 75, 0, 1);
draw_hudbar(xx, mh, p);

//  Speed (200 - 350)
xx = 210; mh = 140; p = clamp((phys_speed - 200) / 150, 0, 1);
draw_set_color(c_lime);
draw_hudbar(xx, mh, p);

//  Speed (350 - 500)
xx = 230; p = clamp((phys_speed - 350) / 150, 0, 1);
draw_hudbar(xx, mh, p);

//  Dynamic speed
draw_set_colour(c_aqua);
var base_speed = 500, speed_interval = (max_speed - base_speed) / 8;
for (var i = 0; i &lt; 8; i++) {
    var l_base = base_speed + speed_interval * i;
    xx += 20; mh -= 10;
    p = clamp((phys_speed - l_base) / speed_interval, 0, 1);
    draw_hudbar(xx, mh, p);
}

//draw_set_colour(c_red);
//draw_text(16, 16, string(phys_speed) + ", " + string(phys_dir));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI Arrows
//  Nearest station
var core = instance_nearest(x, y, obj_station_par);
if (instance_exists(core))  {
    var dir = point_direction(x, y, core.x, core.y);
    var xx = (x - view_xview[0]) * _gscale;
    var yy = (y - view_yview[0]) * _gscale;
    draw_sprite_ext(spr_hud_arrow, 0, xx + lengthdir_x(100, dir), yy + lengthdir_y(100, dir), 0.5, 0.5, dir, c_green, 0.7);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="104">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phys_dir = 90;
image_angle = phys_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="102">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phys_dir = 0;
image_angle = phys_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="100">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phys_dir = 180;
image_angle = phys_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="98">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phys_dir = 270;
image_angle = phys_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
