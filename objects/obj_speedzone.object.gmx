<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fx_speedzone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Defaults
lim_radius = 100;
lim_speed = 50;
scale = lim_radius * meter_size;
image_xscale = scale / 100;
image_yscale = scale / 100;
image_alpha = 0.2;
image_blend = c_red;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade
if (place_meeting(x, y, obj_ship_player))   {
    image_alpha = min(1, image_alpha + 3 * gT);
} else {
    image_alpha = max(0.1, image_alpha - 3 * gT);
}
depth = 10000 + lim_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rescale
scale = lim_radius * meter_size;
image_xscale = scale / 100;
image_yscale = scale / 100;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
var p = 40, t = 10;
//var ci = merge_colour(c_black, image_blend, image_alpha * 0.5 - 0.05);
//var co = merge_colour(c_black, image_blend, image_alpha);

draw_primitive_begin(pr_trianglefan);
draw_vertex_colour(x, y, c_black, 0);
for (var a = 0; a &lt;= 360; a += 360 / p) {
    draw_vertex_colour(x + lengthdir_x(scale, a), y + lengthdir_y(scale, a), image_blend, image_alpha * 0.25 - 0.05);
}
draw_primitive_end();

draw_primitive_begin(pr_trianglestrip);
draw_vertex_colour(x + scale, y, image_blend, image_alpha);
for (var a = 0; a &lt; 360; a += 360 / p) {
    draw_vertex_colour(x + lengthdir_x(scale + t, a), y + lengthdir_y(scale + t, a), image_blend, image_alpha);
    draw_vertex_colour(x + lengthdir_x(scale, a + (360 / p)), y + lengthdir_y(scale, a + (360 / p)), image_blend, image_alpha);
}
draw_vertex_colour(x + scale + t, y, image_blend, image_alpha);
draw_primitive_end();







/*var p = 40, t = 10;
var ci = merge_colour(c_black, image_blend, image_alpha * 0.5 - 0.05);
var co = merge_colour(c_black, image_blend, image_alpha);

draw_primitive_begin(pr_trianglefan);
draw_vertex_colour(x, y, c_black, 1);
for (var a = 0; a &lt;= 360; a += 360 / p) {
    draw_vertex_colour(x + lengthdir_x(scale, a), y + lengthdir_y(scale, a), ci, 1);
}
draw_primitive_end();

draw_primitive_begin(pr_trianglestrip);
draw_vertex_colour(x + scale, y, co, 1);
for (var a = 0; a &lt; 360; a += 360 / p) {
    draw_vertex_colour(x + lengthdir_x(scale + t, a), y + lengthdir_y(scale + t, a), co, 1);
    draw_vertex_colour(x + lengthdir_x(scale, a + (360 / p)), y + lengthdir_y(scale, a + (360 / p)), co, 1);
}
draw_vertex_colour(x + scale + t, y, co, 1);
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
